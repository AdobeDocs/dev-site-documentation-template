{"version":3,"file":"5e65052d-da08a84eaa2a39432d9e.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./node_modules/@adobe/gatsby-theme-aio/src/components/Hero/index.js"],"sourcesContent":["\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { cloneElement, Children, useContext, useEffect } from \"react\";\nimport { withPrefix } from \"gatsby\";\nimport { css } from \"@emotion/react\";\nimport { AnchorButton } from \"../AnchorButton\";\nimport \"@spectrum-css/typography\";\nimport PropTypes from \"prop-types\";\nimport {\n  getElementChild,\n  cloneChildren,\n  TABLET_SCREEN_WIDTH,\n  DESKTOP_SCREEN_WIDTH,\n  MOBILE_SCREEN_WIDTH,\n  DEFAULT_HOME,\n  findSelectedTopPage,\n  rootFixPages,\n  rootFix,\n  findSelectedTopPageMenu,\n} from \"../../utils\";\nimport Context from \"../Context\";\nimport { Breadcrumbs } from \"../Breadcrumbs\";\nimport classNames from \"classnames\";\n\nimport lottie from 'lottie-web';\n\nconst setImageLoading = (child) => {\n  if (child?.props?.mdxType === 'img') {\n    return cloneElement(child, {\n      loading: 'eager'\n    });\n  }\n\n  return child;\n};\n\nconst getAriaLabel = (label, heading = '') => {\n  const labelVal = label === 'Learn more' && heading !== '' ? `${label} about ${heading}` : `${label}`;\n  return labelVal;\n}\n\nconst HeroButtons = ({ buttons, styles = ['fill', 'outline'], variants = ['accent', 'secondary'], heading = '', className }) =>\n\n  buttons ? (\n    <div>\n      <div\n        className={className}\n        css={css`\n          display: flex;\n          flex-wrap: wrap;\n          gap: var(--spectrum-global-dimension-size-200);\n        `}>\n        {Children.map(buttons.props.children, (item, i) => {\n          let style = styles[0];\n          let variant = variants[0];\n\n          if (i > 0) {\n            style = styles[1];\n            variant = variants[1];\n          }\n\n          const link = getElementChild(item);\n\n          return (\n            <div key={i}>\n              <AnchorButton aria-label={getAriaLabel(link.props.children, heading)} href={link.props.href} variant={variant} style={style}>\n                <span class=\"spectrum-Button-label\">{link.props.children}</span>\n              </AnchorButton>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  ) : null;\n\nconst HeroImage = ({ image, styles }) =>\n  image\n    ? cloneElement(image, {\n      children: cloneChildren(image.props.children, setImageLoading),\n      css: css`\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 100%;\n          width: 100%;\n          margin-top: 0;\n          ${styles}\n\n          .gatsby-resp-image-wrapper {\n            max-width: none !important;\n            width: 100% !important;\n            height: 100% !important;\n          }\n\n          .gatsby-resp-image-image {\n            object-fit: cover;\n          }\n        `\n    })\n    : null;\n\nconst HeroTexts = ({ texts, customLayout, isTextWhite = true }) => {\n  const textKeys = Object.keys(texts).filter((key) => key.startsWith('text'));\n  return textKeys.map((textKey) =>\n    cloneElement(texts[textKey], {\n      className: 'spectrum-Body spectrum-Body--sizeL',\n      css: css`\n        &.spectrum-Body--sizeL {\n          margin-top: 0 !important;\n          ${isTextWhite === true &&\n        `\n            color: #fff!important;\n          `\n        }\n          &:last-of-type {\n            margin-bottom: 0 !important;\n          }\n        }\n\n        @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n          padding: 0 var(--spectrum-global-dimension-size-115);\n        }\n      `\n    })\n  );\n};\n\nconst HeroHeading = ({ heading, variant, customLayout }) =>\n  heading\n    ? cloneElement(heading, {\n      // force h1 to support gdocs\n      mdxType: 'h1',\n      originalType: 'h1',\n      className:\n        (variant === 'default' || customLayout) ? customLayout ? 'spectrum-Heading--sizeXL spectrum-Heading--serif' : 'spectrum-Heading--sizeXL' : 'spectrum-Heading--sizeXXL spectrum-Heading--serif',\n      css: css`\n          margin-top: 0;\n          margin-bottom: var(--spectrum-global-dimension-size-200);\n\n          & + p {\n            margin-bottom: var(--spectrum-global-dimension-size-200);\n          }\n        `\n    })\n    : null;\n\nconst Hero = ({\n  className,\n  background,\n  theme = 'dark',\n  heading,\n  image,\n  icon,\n  buttons,\n  assetsImg,\n  variant = 'default',\n  containerHeight = 1000,\n  width = DESKTOP_SCREEN_WIDTH,\n  customLayout = false,\n  primaryOutline = false,\n  isPrimaryBtn = false,\n  variantsTypePrimary = 'accent',\n  variantsTypeSecondary = 'secondary',\n  animationVideo = \"\",\n  videoUrl,\n  ...props\n}) => {\n  const { siteMetadata, location } = useContext(Context);\n\n\n  useEffect(() => {\n    if (animationVideo) {\n      var anim = lottie.loadAnimation({\n        container: document.querySelector(\"#svgContainer\"),\n        renderer: \"svg\",\n        loop: false,\n        autoplay: true,\n        animationData: animationVideo\n      });\n\n      anim.addEventListener(\"enterFrame\", function (animation) {\n        if (animation.currentTime > (anim.totalFrames - 25)) {\n          anim.pause();\n        }\n      });\n    }\n  }, [])\n\n\n  if (!variant || variant === 'default') {\n    const { home, pages } = siteMetadata;\n    const pathWithRootFix = rootFix(location.pathname);\n    const pagesWithRootFix = rootFixPages(pages);\n    const selectedTopPage = findSelectedTopPage(pathWithRootFix, pagesWithRootFix);\n    const selectedTopPageMenu = findSelectedTopPageMenu(pathWithRootFix, selectedTopPage);\n\n    return (\n      <section\n        className={classNames(className, `spectrum--${theme}`)}\n        css={css`\n          position: relative;\n          height: var(--spectrum-global-dimension-size-3400);\n          margin-bottom: var(--spectrum-global-dimension-size-400);\n          background-color: ${background ?? 'rgb( 29, 125, 238)'};\n          width: 100%;\n          display: flex;\n\n          @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n            overflow: auto;\n          }\n\n          @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n            height: calc(100vh - var(--spectrum-global-dimension-size-1200));\n          }\n        `}>\n        {videoUrl && image ? <div css={css`\n              display : flex;\n              justify-content:center;\n              `}>\n          <HeroImage image={image} />\n          <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                      display: inline;\n                      position: absolute;\n                      width: 30%;\n                      height:100%;\n                      box-sizing: border-box;\n                      padding: var(--spectrum-global-dimension-size-200);\n                  \n                      @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                        display: block;\n                        width: 100%;\n                      }\n                      }\n                    `}>\n            <source src={videoUrl} type=\"video/mp4\" />\n          </video>\n        </div>\n          :\n          image ? <HeroImage image={image} styles={`position: absolute;`} /> : videoUrl &&\n            <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                  display: inline;\n                  width: 90%;\n                  height:100%;\n                  box-sizing: border-box;\n                  padding: var(--spectrum-global-dimension-size-200);\n              \n                  @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    display: block;\n                    width: 100%;\n                  }\n                  }\n                `}>\n              <source src={videoUrl} type=\"video/mp4\" />\n            </video>\n        }\n\n        <div\n          css={css`\n            margin: auto;\n            display: flex;\n            position: relative;\n            height: 100%;\n            max-width: ${width};\n            flex-direction: row;\n            width: 100%;\n            align-items: center;\n\n            & > p {\n              margin-top: 0 !important;\n            }\n          `}>\n          <div\n            css={css`\n              width: calc(5 * 100% / 12);\n              position: absolute;\n              display: flex;\n              flex-direction: column;\n\n              & > p {\n                margin-top: var(--spectrum-global-dimension-size-225) !important;\n                margin-bottom: 0 !important;\n              }\n\n              @media screen and (max-width: ${DESKTOP_SCREEN_WIDTH}) {\n                width: auto;\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            {home?.hidden !== true && home?.title && home?.href && selectedTopPage && (\n              <Breadcrumbs\n                pages={[\n                  DEFAULT_HOME,\n                  home,\n                  { ...selectedTopPage, href: withPrefix(selectedTopPage.href) },\n                  selectedTopPageMenu && { ...selectedTopPageMenu, href: withPrefix(selectedTopPageMenu.href) }\n                ]}\n              />\n            )}\n\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n          </div>\n        </div>\n      </section>\n    );\n  } else {\n    const height = 'calc(var(--spectrum-global-dimension-size-6000) + var(--spectrum-global-dimension-size-1800))';\n    if (variant === 'fullwidth' && customLayout) {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            width: 100%;\n            background: ${background ?? \"var(--spectrum-global-color-gray-50)\"};\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              overflow-y: hidden;\n            }\n\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              .spectrum-Heading--sizeXL {\n                font-size: var(--spectrum-alias-heading-l-text-size);\n              }\n            }\n          `}\n        >\n          {videoUrl && image ? <div css={css`\n              display : flex;\n              justify-content:center;\n              `}>\n            <HeroImage image={image} />\n            <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                      display: inline;\n                      position: absolute;\n                      width: 30%;\n                      height:100%;\n                      box-sizing: border-box;\n                      padding: var(--spectrum-global-dimension-size-200);\n                  \n                      @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                        display: block;\n                        width: 100%;\n                      }\n                      }\n                    `}>\n              <source src={videoUrl} type=\"video/mp4\" />\n            </video>\n          </div>\n            :\n            image ? <HeroImage image={image} /> : videoUrl &&\n              <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                  display: inline;\n                  width: 90%;\n                  height:100%;\n                  box-sizing: border-box;\n                  padding: var(--spectrum-global-dimension-size-200);\n              \n                  @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    display: block;\n                    width: 100%;\n                  }\n                  }\n                `}>\n                <source src={videoUrl} type=\"video/mp4\" />\n              </video>\n          }\n\n\n          <div\n            css={css`\n              height: 100%;\n              top: 0;\n              bottom: 0;\n              width: 100%;\n              box-sizing: border-box;\n              padding: 0;\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: flex-end;\n              text-align: center;\n\n              h1 {\n                padding: var(--spectrum-global-dimension-size-500) var(--spectrum-global-dimension-size-300) var(--spectrum-global-dimension-size-0) !important;\n              }\n\n              @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                padding: 0 !important;\n              }\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                padding: 0 var(--spectrum-global-dimension-size-250);\n\n                h1 {\n                  padding: var(--spectrum-global-dimension-size-400) var(--spectrum-global-dimension-size-200) var(--spectrum-global-dimension-size-0) !important;\n                }\n              }\n            `}\n          >\n            {heading && (\n              <HeroHeading\n                heading={heading}\n                variant={variant}\n                customLayout={customLayout}\n              />\n            )}\n\n            <HeroTexts texts={props} />\n\n            {buttons ? (\n              <HeroButtons\n                buttons={buttons}\n                styles={['fill', 'outline']}\n                variants={[variantsTypePrimary, variantsTypeSecondary]}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                  margin-bottom: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n            ) : (\n              <div\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-200);\n                `}\n              />\n            )}\n            <div className={assetsImg?.props?.children} />\n          </div>\n        </section>\n      )\n    } else if (variant === 'video' && animationVideo) {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            overflow: hidden;\n            height: auto;\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n          `}>\n          <div css={css`\n              @media screen and (min-width: ${DESKTOP_SCREEN_WIDTH}) {\n                position: relative;\n                max-width:${DESKTOP_SCREEN_WIDTH}\n                margin:auto;\n              }\n            `}>\n            <div css={css`\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  display: none;\n                }\n              `}>\n              <div id=\"svgContainer\"></div>\n            </div>\n\n            <div\n              css={css`\n                  display: flex;\n                  height: 100%;\n                  max-width: ${width};\n                  margin: auto;\n                  @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                    display: inline;\n                  }\n              `}>\n              <div\n                css={css`\n                    display: flex;\n                    flex-direction: column;\n                    justify-content: center !important;\n                    position: absolute;\n                    padding: 0;\n                    top: 0;\n                    text-align: left;\n                    width: 30%;\n                    align-item:center;\n                    bottom: 0;\n                    box-sizing: border-box;\n\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                      padding: 0 !important;\n                      width: 100% !important;\n                      position: initial !important;\n                    }\n\n                    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                      padding: 0 var(--spectrum-global-dimension-size-100);\n                      width:100% !important;\n                      top: 20px !important;\n                      position: initial !important;\n                      h1 {\n                        padding: 0 var(--spectrum-global-dimension-size-200) 0 var(--spectrum-global-dimension-size-0) !important;\n                        font-size: var(--spectrum-heading-l-text-size, var(--spectrum-alias-heading-l-text-size))\n                      }\n                    }\n                `}>\n\n                {heading && (\n                  <HeroHeading\n                    heading={heading}\n                    variant={variant}\n                    customLayout={customLayout}\n                  />\n                )}\n\n                <HeroTexts texts={props} />\n\n                <HeroButtons\n                  buttons={buttons}\n                  styles={['outline']}\n                  variants={['staticWhite']}\n                  css={css`\n                      margin-top: var(--spectrum-global-dimension-size-400);\n                    `}\n                />\n              </div>\n              <div\n                css={css`\n                    max-width: ${width};\n                    margin: auto;\n                    display: none;\n                    @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                      display: block;\n                    }\n                    @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                      display: inline;\n                    }\n                `}>\n                <div className={assetsImg?.props?.children} />\n              </div>\n            </div>\n          </div>\n        </section>\n      );\n    } else if (variant === 'halfwidth' && customLayout) {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            overflow: hidden;\n            height: auto;\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-225);\n              box-sizing: border-box;\n            }\n        `}>\n          <div css={css`\n            @media screen and (min-width: ${DESKTOP_SCREEN_WIDTH}) {\n              display: flex;\n              justify-content: space-between;\n              position: relative;\n              max-width:${DESKTOP_SCREEN_WIDTH};\n              margin:auto;\n            }\n          `}>\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: center !important;\n                // position: absolute;\n                padding: 0;\n                top: 0;\n                text-align: left;\n                width: 36%;\n                align-item:center;\n                bottom: 0;\n                box-sizing: border-box;\n\n                @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                  padding: 0 !important;\n                  width: 100% !important;\n                  position: initial !important;\n                }\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  padding: 0 var(--spectrum-global-dimension-size-100);\n                  width:100% !important;\n                  top: 20px !important;\n                  position: initial !important;\n                  h1 {\n                    padding: 0 var(--spectrum-global-dimension-size-200) 0 var(--spectrum-global-dimension-size-0) !important;\n                    font-size: var(--spectrum-heading-l-text-size, var(--spectrum-alias-heading-l-text-size))\n                  }\n                }\n            `}>\n              {icon &&\n                cloneElement(icon, {\n                  children: cloneChildren(icon.props.children, setImageLoading),\n                  css: css`\n                  height: var(--spectrum-global-dimension-size-400);\n                  width: var(--spectrum-global-dimension-size-3600);\n                  margin-top: 0 !important;\n                  margin-bottom: var(--spectrum-global-dimension-size-300) !important;\n                  @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n                    width: var(--spectrum-global-dimension-size-3000) !important;\n                  }\n                  .gatsby-resp-image-wrapper {\n                    max-width: none !important;\n                    width: 100% !important;\n                    height: 100% !important;\n                  }\n\n                  .gatsby-resp-image-image {\n                    height: 100%;\n                    object-fit: contain;\n                  }\n                `\n                })}\n\n              {heading && (\n                <HeroHeading\n                  heading={heading}\n                  variant={variant}\n                  customLayout={customLayout}\n                />\n              )}\n\n              <HeroTexts texts={props} />\n\n              <HeroButtons\n                buttons={buttons}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-400);\n                `}\n                variants={[variantsTypePrimary, variantsTypeSecondary]}\n                style={[\"outine\"]}\n              />\n            </div>\n            <div>\n              <div className={assetsImg?.props?.children} />\n            </div>\n          </div>\n        </section>\n      );\n    } else if (variant === 'fullwidth') {\n      return (\n        <section\n          className={classNames(className, `spectrum--${theme}`)}\n          css={css`\n            position: relative;\n            width: 100%;\n            height: ${height};\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              overflow: auto;\n            }\n\n            @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n              height: 100vh;\n\n              .spectrum-Heading--sizeXXL {\n                font-size: var(--spectrum-alias-heading-xl-text-size);\n              }\n            }\n          `}>\n          {videoUrl && image ? <div css={css`\n              display : flex;\n              justify-content:center;\n              `}>\n            <HeroImage image={image} />\n            <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                      display: inline;\n                      position: absolute;\n                      width: 30%;\n                      height:100%;\n                      box-sizing: border-box;\n                      padding: var(--spectrum-global-dimension-size-200);\n                  \n                      @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                        display: block;\n                        width: 100%;\n                      }\n                      }\n                    `}>\n              <source src={videoUrl} type=\"video/mp4\" />\n            </video>\n          </div>\n            :\n            image ? <HeroImage image={image} /> : videoUrl &&\n              <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline\n                css={css`\n                  display: inline;\n                  width: 100%;\n                  text-align:center;\n                  height:100%;\n                  box-sizing: border-box;\n                  padding: var(--spectrum-global-dimension-size-200);\n              \n                  @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                    display: block;\n                    width: 100%;\n                  }\n                  }\n                `}>\n                <source src={videoUrl} type=\"video/mp4\" />\n              </video>\n          }\n\n          <div\n            css={css`\n              height: 100%;\n              position: absolute;\n              top: 0;\n              width: 100%;\n              box-sizing: border-box;\n              padding: 0 calc(var(--spectrum-global-dimension-size-3600) + var(--spectrum-global-dimension-size-125));\n              display: flex;\n              flex-direction: column;\n              align-items: center;\n              justify-content: center;\n              text-align: center;\n\n              @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                padding: 0 var(--spectrum-global-dimension-size-400);\n              }\n            `}>\n            <HeroHeading heading={heading} variant={variant} />\n\n            <HeroTexts texts={props} />\n\n            <HeroButtons\n              buttons={buttons}\n              variants={['accent', 'secondary']}\n              css={css`\n                margin-top: var(--spectrum-global-dimension-size-400);\n              `}\n            />\n            <div className={assetsImg?.props?.children} />\n          </div>\n        </section>\n      );\n    } else if (variant === 'halfwidth') {\n      return (\n        <section\n          className={classNames(className, `spectrum--lightest`)}\n          css={css`\n            background: ${background ?? 'var(--spectrum-global-color-gray-50)'};\n            width: 100%;\n            height: ${height};\n            overflow: hidden;\n\n            @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n              height: auto;\n              padding: var(--spectrum-global-dimension-size-400);\n              box-sizing: border-box;\n            }\n          `}>\n          <div\n            css={css`\n              display: flex;\n              height: 100%;\n              justify-content: center;\n            `}>\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                width: calc(5 * 100% / 12);\n                margin-left: var(--spectrum-global-dimension-size-800);\n                margin-right: var(--spectrum-global-dimension-size-400);\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  width: 100%;\n                  margin: 0;\n                }\n              `}>\n              {icon &&\n                cloneElement(icon, {\n                  children: cloneChildren(icon.props.children, setImageLoading),\n                  css: css`\n                    height: var(--spectrum-global-dimension-size-600);\n                    width: var(--spectrum-global-dimension-size-600);\n                    margin-top: 0 !important;\n                    margin-bottom: var(--spectrum-global-dimension-size-300) !important;\n\n                    .gatsby-resp-image-wrapper {\n                      max-width: none !important;\n                      width: 100% !important;\n                      height: 100% !important;\n                    }\n\n                    .gatsby-resp-image-image {\n                      height: 100%;\n                      object-fit: contain;\n                    }\n                  `\n                })}\n\n              <HeroHeading heading={heading} isVariant />\n\n              <HeroTexts texts={props} isTextWhite={false} />\n\n              <HeroButtons\n                buttons={buttons}\n                css={css`\n                  margin-top: var(--spectrum-global-dimension-size-400);\n                `}\n              />\n            </div>\n            <div\n              css={css`\n                flex: 1;\n\n                @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                  display: none;\n                }\n              `}>\n\n              {videoUrl && image ? <div css={css`\n              display : flex;\n              justify-content:center;\n              `}>\n                <HeroImage image={image} />\n                <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                      display: inline;\n                      position: absolute;\n                      width: 0%;\n                      height:100%;\n                      box-sizing: border-box;\n                      padding: var(--spectrum-global-dimension-size-200);\n                  \n                      @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                        display: block;\n                        width: 100%;\n                      }\n                      }\n                    `}>\n                  <source src={videoUrl} type=\"video/mp4\" />\n                </video>\n              </div>\n                :\n                image ? <HeroImage image={image} /> : videoUrl &&\n                  <div\n                    css={css`\n                      width : 100%;\n                      display: flex;\n                      justify-content: center;\n                      margin: 150px 0;\n                    `}\n                  >\n                    <video loop=\"true\" muted=\"true\" autoPlay preload=\"metadata\" playsInline css={css`\n                        display: inline;\n                        width: 600px;\n                        height:100%;\n                        box-sizing: border-box;\n                        padding: var(--spectrum-global-dimension-size-200);\n                        border-radius : 25px ;\n                    \n                        @media screen and (max-width: ${TABLET_SCREEN_WIDTH}) {\n                          display: block;\n                          width: 100%;\n                        }\n                        }\n                      `}>\n                      <source src={videoUrl} type=\"video/mp4\" />\n                    </video>\n                  </div>\n              }\n\n            </div>\n          </div>\n        </section>\n      );\n    }\n  }\n};\n\nHero.propTypes = {\n  background: PropTypes.string,\n  heading: PropTypes.element,\n  text: PropTypes.element,\n  image: PropTypes.element,\n  icon: PropTypes.element,\n  buttons: PropTypes.element,\n  variant: PropTypes.string,\n  width: PropTypes.string,\n  theme: PropTypes.string,\n  customLayout: PropTypes.bool,\n  assetsImg: PropTypes.element,\n  animationVideo: PropTypes.element,\n  videoUrl: PropTypes.element\n};\n\nHeroButtons.propTypes = {\n  buttons: PropTypes.element,\n  variants: PropTypes.array,\n  quiets: PropTypes.array\n};\n\nHeroImage.propTypes = {\n  image: PropTypes.element\n};\n\nexport { Hero, HeroImage, HeroButtons };\n"],"names":["setImageLoading","child","_child$props","props","mdxType","cloneElement","loading","getAriaLabel","label","heading","_ref15","name","styles","HeroButtons","_ref16","buttons","_ref16$styles","_ref16$variants","variants","_ref16$heading","className","___EmotionJSX","css","Children","children","item","i","style","variant","link","getElementChild","key","AnchorButton","href","class","HeroImage","_ref17","image","cloneChildren","HeroTexts","_ref18","texts","_ref18$isTextWhite","customLayout","isTextWhite","Object","keys","filter","startsWith","map","textKey","MOBILE_SCREEN_WIDTH","_ref14","HeroHeading","_ref19","originalType","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","Hero","_ref20","background","_ref20$theme","theme","icon","assetsImg","_ref20$variant","_ref20$width","containerHeight","width","DESKTOP_SCREEN_WIDTH","_ref20$customLayout","_ref20$variantsTypePr","primaryOutline","isPrimaryBtn","variantsTypePrimary","_ref20$variantsTypeSe","variantsTypeSecondary","_ref20$animationVideo","animationVideo","videoUrl","_objectWithoutPropertiesLoose","_excluded","_useContext","useContext","Context","siteMetadata","location","useEffect","anim","lottie","container","document","querySelector","renderer","loop","autoplay","animationData","addEventListener","animation","currentTime","totalFrames","pause","home","pages","pathWithRootFix","rootFix","pathname","pagesWithRootFix","rootFixPages","selectedTopPage","findSelectedTopPage","selectedTopPageMenu","findSelectedTopPageMenu","classNames","muted","autoPlay","preload","playsInline","TABLET_SCREEN_WIDTH","src","type","hidden","title","Breadcrumbs","DEFAULT_HOME","_objectSpread","withPrefix","_assetsImg$props","_assetsImg$props2","_assetsImg$props3","_assetsImg$props4","height","id","isVariant"],"sourceRoot":""}